// 1 << i означает сдвинуть 1 на i влево
// т.о. создаем число, начинающееся с 1 и с i нулями после него
// например: 1 << 3 == 0b1000 - один и 3 нуля после

// clearBit(95, 4) step by step:
// 95 это 0b0000000000000000000000000000000000000000000000000000000001011111
// установим 4-й бит в 0
// 1 << 4 возвращает 0b10000
// как int64 это 0b0000000000000000000000000000000000000000000000000000000000010000
// сделаем отрицание с ^ оператором:
// 0b1111111111111111111111111111111111111111111111111111111111101111
// и наконец произведем AND с 95:
// 0b0000000000000000000000000000000000000000000000000000000001011111
// 0b1111111111111111111111111111111111111111111111111111111111101111
// -------------------------------------------------------------------
// 0b0000000000000000000000000000000000000000000000000000000001001111
//                                                              |
// результат 79 в десятичной системе

package main

import "log"

func main() {
	log.Println(
		toggleBit(int64(95), 4, false),
	)
}

func toggleBit(n int64, i int, set bool) int64 {
	// n - число
	// i - позиция бита начиная с 0 справа
	// set - установить или очистить бит

	var result int64

	if set {
		result = setBit(n, i)
	} else {
		result = clearBit(n, i)
	}

	return result
}

func setBit(n int64, i int) int64 {
	// устанавливает i-й бит в 1
	return n | (int64(1) << i)
}

func clearBit(n int64, i int) int64 {
	// устанавливает i-й бит в 0
	return n &^ (int64(1) << i)
}
